
PKES_prac_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800200  00800200  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176f  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000894  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099b  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00003140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8e  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e28  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00004df6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e5 c1       	rjmp	.+970    	; 0x430 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	0a c2       	rjmp	.+1044   	; 0x482 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	68 c0       	rjmp	.+208    	; 0x146 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 38       	cpi	r26, 0x8E	; 142
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ed d1       	rcall	.+986    	; 0x4fa <main>
 120:	23 c2       	rjmp	.+1094   	; 0x568 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN11ADConverter19readVoltageBlockingEi>:
	
	//enable global interrupts
	sei();
	
	//start conversion
	ADCSRA |= (1<<ADSC);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	94 e8       	ldi	r25, 0x84	; 132
 12a:	90 83       	st	Z, r25
 12c:	80 93 7c 00 	sts	0x007C, r24
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
 136:	80 81       	ld	r24, Z
 138:	86 fd       	sbrc	r24, 6
 13a:	fd cf       	rjmp	.-6      	; 0x136 <_ZN11ADConverter19readVoltageBlockingEi+0x12>
 13c:	80 91 78 00 	lds	r24, 0x0078
 140:	90 91 79 00 	lds	r25, 0x0079
 144:	08 95       	ret

00000146 <__vector_29>:
}

ISR(ADC_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	ADConverter::result = ADC;
 15c:	80 91 78 00 	lds	r24, 0x0078
 160:	90 91 79 00 	lds	r25, 0x0079
 164:	90 93 01 02 	sts	0x0201, r25
 168:	80 93 00 02 	sts	0x0200, r24
	//start next conversion
	ADCSRA |= (1<<ADSC);
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0b be       	out	0x3b, r0	; 59
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_Z10digitCounti>:
	else
		*port &=~ (1<<pin);//delete bit
}

//fastest way to do it btw
int digitCount (int n) {
 18c:	99 23       	and	r25, r25
 18e:	1c f4       	brge	.+6      	; 0x196 <_Z10digitCounti+0xa>
 190:	91 95       	neg	r25
 192:	81 95       	neg	r24
 194:	91 09       	sbc	r25, r1
	//lets hope n is != minint, because in c, that fucks up everything
    if (n < 0) n = -n;
    if (n < 10) return 1;
 196:	8a 30       	cpi	r24, 0x0A	; 10
 198:	91 05       	cpc	r25, r1
 19a:	6c f0       	brlt	.+26     	; 0x1b6 <_Z10digitCounti+0x2a>
    if (n < 100) return 2;
 19c:	84 36       	cpi	r24, 0x64	; 100
 19e:	91 05       	cpc	r25, r1
 1a0:	6c f0       	brlt	.+26     	; 0x1bc <_Z10digitCounti+0x30>
    if (n < 1000) return 3;
 1a2:	88 3e       	cpi	r24, 0xE8	; 232
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	92 07       	cpc	r25, r18
 1a8:	64 f0       	brlt	.+24     	; 0x1c2 <_Z10digitCounti+0x36>
    if (n < 10000) return 4;
 1aa:	80 31       	cpi	r24, 0x10	; 16
 1ac:	97 42       	sbci	r25, 0x27	; 39
 1ae:	64 f0       	brlt	.+24     	; 0x1c8 <_Z10digitCounti+0x3c>
    if (n < 100000) return 5;
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

//fastest way to do it btw
int digitCount (int n) {
	//lets hope n is != minint, because in c, that fucks up everything
    if (n < 0) n = -n;
    if (n < 10) return 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	08 95       	ret
    if (n < 100) return 2;
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret
    if (n < 1000) return 3;
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret
    if (n < 10000) return 4;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	90 e0       	ldi	r25, 0x00	; 0
    if (n < 100000000) return 8;
    if (n < 1000000000) return 9;
    /*      2147483647 is 2^31-1 - add more ifs as needed
       and adjust this final return as well. */
    return 10;
}
 1cc:	08 95       	ret

000001ce <_ZN6Serial16serialIsDataSentEv>:
		char resultString[numberOfDigits];
		//convert to string
		itoa(val, resultString, 10);
		//write to serial
		serialWriteString_0(resultString);
	}
 1ce:	80 91 c0 00 	lds	r24, 0x00C0
 1d2:	85 fb       	bst	r24, 5
 1d4:	88 27       	eor	r24, r24
 1d6:	80 f9       	bld	r24, 0
 1d8:	08 95       	ret

000001da <_ZN6Serial17serialDirectWriteEh>:
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
 1de:	f7 df       	rcall	.-18     	; 0x1ce <_ZN6Serial16serialIsDataSentEv>
 1e0:	88 23       	and	r24, r24
 1e2:	e9 f3       	breq	.-6      	; 0x1de <_ZN6Serial17serialDirectWriteEh+0x4>
 1e4:	c0 93 c6 00 	sts	0x00C6, r28
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <_ZN6Serial11serialWriteEh>:
 1ec:	20 91 88 02 	lds	r18, 0x0288
 1f0:	30 91 89 02 	lds	r19, 0x0289
 1f4:	40 91 8a 02 	lds	r20, 0x028A
 1f8:	50 91 8b 02 	lds	r21, 0x028B
 1fc:	24 17       	cp	r18, r20
 1fe:	35 07       	cpc	r19, r21
 200:	d9 f0       	breq	.+54     	; 0x238 <_ZN6Serial11serialWriteEh+0x4c>
 202:	40 91 8c 02 	lds	r20, 0x028C
 206:	50 91 8d 02 	lds	r21, 0x028D
 20a:	40 34       	cpi	r20, 0x40	; 64
 20c:	51 05       	cpc	r21, r1
 20e:	a9 f0       	breq	.+42     	; 0x23a <_ZN6Serial11serialWriteEh+0x4e>
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	50 93 8d 02 	sts	0x028D, r21
 218:	40 93 8c 02 	sts	0x028C, r20
 21c:	a9 01       	movw	r20, r18
 21e:	4f 5f       	subi	r20, 0xFF	; 255
 220:	5f 4f       	sbci	r21, 0xFF	; 255
 222:	50 93 89 02 	sts	0x0289, r21
 226:	40 93 88 02 	sts	0x0288, r20
 22a:	2f 73       	andi	r18, 0x3F	; 63
 22c:	33 27       	eor	r19, r19
 22e:	f9 01       	movw	r30, r18
 230:	e8 5b       	subi	r30, 0xB8	; 184
 232:	fd 4f       	sbci	r31, 0xFD	; 253
 234:	80 83       	st	Z, r24
 236:	08 95       	ret
 238:	d0 cf       	rjmp	.-96     	; 0x1da <_ZN6Serial17serialDirectWriteEh>
 23a:	08 95       	ret

0000023c <_ZN6Serial11serialWriteEPKch>:
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	66 23       	and	r22, r22
 246:	09 f4       	brne	.+2      	; 0x24a <_ZN6Serial11serialWriteEPKch+0xe>
 248:	60 c0       	rjmp	.+192    	; 0x30a <_ZN6Serial11serialWriteEPKch+0xce>
 24a:	40 91 88 02 	lds	r20, 0x0288
 24e:	50 91 89 02 	lds	r21, 0x0289
 252:	20 91 8a 02 	lds	r18, 0x028A
 256:	30 91 8b 02 	lds	r19, 0x028B
 25a:	42 17       	cp	r20, r18
 25c:	53 07       	cpc	r21, r19
 25e:	19 f0       	breq	.+6      	; 0x266 <_ZN6Serial11serialWriteEPKch+0x2a>
 260:	61 11       	cpse	r22, r1
 262:	30 c0       	rjmp	.+96     	; 0x2c4 <_ZN6Serial11serialWriteEPKch+0x88>
 264:	52 c0       	rjmp	.+164    	; 0x30a <_ZN6Serial11serialWriteEPKch+0xce>
 266:	c6 2f       	mov	r28, r22
 268:	8c 01       	movw	r16, r24
 26a:	fc 01       	movw	r30, r24
 26c:	80 81       	ld	r24, Z
 26e:	b5 df       	rcall	.-150    	; 0x1da <_ZN6Serial17serialDirectWriteEh>
 270:	8c 2f       	mov	r24, r28
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 97       	sbiw	r24, 0x02	; 2
 276:	0c f4       	brge	.+2      	; 0x27a <_ZN6Serial11serialWriteEPKch+0x3e>
 278:	48 c0       	rjmp	.+144    	; 0x30a <_ZN6Serial11serialWriteEPKch+0xce>
 27a:	d8 01       	movw	r26, r16
 27c:	11 96       	adiw	r26, 0x01	; 1
 27e:	c8 01       	movw	r24, r16
 280:	8c 0f       	add	r24, r28
 282:	91 1d       	adc	r25, r1
 284:	cc e8       	ldi	r28, 0x8C	; 140
 286:	d2 e0       	ldi	r29, 0x02	; 2
 288:	68 e8       	ldi	r22, 0x88	; 136
 28a:	72 e0       	ldi	r23, 0x02	; 2
 28c:	4d 91       	ld	r20, X+
 28e:	28 81       	ld	r18, Y
 290:	39 81       	ldd	r19, Y+1	; 0x01
 292:	20 34       	cpi	r18, 0x40	; 64
 294:	31 05       	cpc	r19, r1
 296:	91 f0       	breq	.+36     	; 0x2bc <_ZN6Serial11serialWriteEPKch+0x80>
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	39 83       	std	Y+1, r19	; 0x01
 29e:	28 83       	st	Y, r18
 2a0:	fb 01       	movw	r30, r22
 2a2:	20 81       	ld	r18, Z
 2a4:	31 81       	ldd	r19, Z+1	; 0x01
 2a6:	89 01       	movw	r16, r18
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
 2ac:	11 83       	std	Z+1, r17	; 0x01
 2ae:	00 83       	st	Z, r16
 2b0:	2f 73       	andi	r18, 0x3F	; 63
 2b2:	33 27       	eor	r19, r19
 2b4:	f9 01       	movw	r30, r18
 2b6:	e8 5b       	subi	r30, 0xB8	; 184
 2b8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ba:	40 83       	st	Z, r20
 2bc:	a8 17       	cp	r26, r24
 2be:	b9 07       	cpc	r27, r25
 2c0:	29 f7       	brne	.-54     	; 0x28c <_ZN6Serial11serialWriteEPKch+0x50>
 2c2:	23 c0       	rjmp	.+70     	; 0x30a <_ZN6Serial11serialWriteEPKch+0xce>
 2c4:	dc 01       	movw	r26, r24
 2c6:	ac 01       	movw	r20, r24
 2c8:	46 0f       	add	r20, r22
 2ca:	51 1d       	adc	r21, r1
 2cc:	cc e8       	ldi	r28, 0x8C	; 140
 2ce:	d2 e0       	ldi	r29, 0x02	; 2
 2d0:	68 e8       	ldi	r22, 0x88	; 136
 2d2:	72 e0       	ldi	r23, 0x02	; 2
 2d4:	9d 91       	ld	r25, X+
 2d6:	28 81       	ld	r18, Y
 2d8:	39 81       	ldd	r19, Y+1	; 0x01
 2da:	20 34       	cpi	r18, 0x40	; 64
 2dc:	31 05       	cpc	r19, r1
 2de:	91 f0       	breq	.+36     	; 0x304 <_ZN6Serial11serialWriteEPKch+0xc8>
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	39 83       	std	Y+1, r19	; 0x01
 2e6:	28 83       	st	Y, r18
 2e8:	fb 01       	movw	r30, r22
 2ea:	20 81       	ld	r18, Z
 2ec:	31 81       	ldd	r19, Z+1	; 0x01
 2ee:	89 01       	movw	r16, r18
 2f0:	0f 5f       	subi	r16, 0xFF	; 255
 2f2:	1f 4f       	sbci	r17, 0xFF	; 255
 2f4:	11 83       	std	Z+1, r17	; 0x01
 2f6:	00 83       	st	Z, r16
 2f8:	2f 73       	andi	r18, 0x3F	; 63
 2fa:	33 27       	eor	r19, r19
 2fc:	f9 01       	movw	r30, r18
 2fe:	e8 5b       	subi	r30, 0xB8	; 184
 300:	fd 4f       	sbci	r31, 0xFD	; 253
 302:	90 83       	st	Z, r25
 304:	a4 17       	cp	r26, r20
 306:	b5 07       	cpc	r27, r21
 308:	29 f7       	brne	.-54     	; 0x2d4 <_ZN6Serial11serialWriteEPKch+0x98>
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <_ZN6Serial19serialWriteString_0EPKc>:
 314:	fc 01       	movw	r30, r24
 316:	01 90       	ld	r0, Z+
 318:	00 20       	and	r0, r0
 31a:	e9 f7       	brne	.-6      	; 0x316 <_ZN6Serial19serialWriteString_0EPKc+0x2>
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	bf 01       	movw	r22, r30
 320:	68 1b       	sub	r22, r24
 322:	79 0b       	sbc	r23, r25
 324:	8b cf       	rjmp	.-234    	; 0x23c <_ZN6Serial11serialWriteEPKch>
 326:	08 95       	ret

00000328 <_ZN6Serial18serialWriteDecimalEj>:

	/************************************************************************/
	/* converts an integer to its ascii representation and sends it via UART*/
	/************************************************************************/
	void Serial::serialWriteDecimal(uint16_t val){
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	7c 01       	movw	r14, r24
		char resultString[numberOfDigits];
		//convert to string
		utoa(val, resultString, 10);
		//write to serial
		serialWriteString_0(resultString);
	}
 33e:	cd b6       	in	r12, 0x3d	; 61
 340:	de b6       	in	r13, 0x3e	; 62
	/************************************************************************/
	/* converts an integer to its ascii representation and sends it via UART*/
	/************************************************************************/
	void Serial::serialWriteDecimal(uint16_t val){
		//get the number of digits
		uint8_t numberOfDigits = digitCount(val);
 342:	24 df       	rcall	.-440    	; 0x18c <_Z10digitCounti>
		//create buffer for result
		char resultString[numberOfDigits];
 344:	2d b7       	in	r18, 0x3d	; 61
 346:	3e b7       	in	r19, 0x3e	; 62
 348:	28 1b       	sub	r18, r24
 34a:	31 09       	sbc	r19, r1
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	3e bf       	out	0x3e, r19	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	2d bf       	out	0x3d, r18	; 61
 356:	0d b7       	in	r16, 0x3d	; 61
 358:	1e b7       	in	r17, 0x3e	; 62
 35a:	0f 5f       	subi	r16, 0xFF	; 255
 35c:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 35e:	4a e0       	ldi	r20, 0x0A	; 10
 360:	b8 01       	movw	r22, r16
 362:	c7 01       	movw	r24, r14
 364:	d8 d0       	rcall	.+432    	; 0x516 <__utoa_ncheck>
		//convert to string
		utoa(val, resultString, 10);
		//write to serial
		serialWriteString_0(resultString);
 366:	c8 01       	movw	r24, r16
 368:	d5 df       	rcall	.-86     	; 0x314 <_ZN6Serial19serialWriteString_0EPKc>
	}
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de be       	out	0x3e, r13	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd be       	out	0x3d, r12	; 61
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	08 95       	ret

00000386 <_ZN6Serial10serialInitEv>:
	 * Initialize serial with the help of serial utilities provided by atmel in setbaud.h
	 */
	void Serial::serialInit(){
		//calculated by setbaud.h, which also checks for baud rate range and possible double speed mode
		//formula is (F_CPU/16/BAUD)-1 per data sheet
		UBRR0H = UBRRH_VALUE;//first byte into 
 386:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = UBRRL_VALUE;//shift re
 38a:	82 e2       	ldi	r24, 0x22	; 34
 38c:	80 93 c4 00 	sts	0x00C4, r24
	
		//double baud rate?
		#if USE_2X
			UCSR0A |= (1 << U2X0);
 390:	e0 ec       	ldi	r30, 0xC0	; 192
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	82 60       	ori	r24, 0x02	; 2
 398:	80 83       	st	Z, r24
		#else
			UCSR0A &= ~(1 << U2X0);
		#endif
	
		//reset both config bytes, even though it does not make sense
		UCSR0C = 0x00;
 39a:	a2 ec       	ldi	r26, 0xC2	; 194
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	1c 92       	st	X, r1
		UCSR0B = 0x00;
 3a0:	e1 ec       	ldi	r30, 0xC1	; 193
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	10 82       	st	Z, r1
	
		//set 8 bits of data, no parity seems to be default
		UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	8c 93       	st	X, r24
	
		//enable RX, TX systems
		UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 3aa:	88 e1       	ldi	r24, 0x18	; 24
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <_ZN6Serial15writeToRxBufferEh>:
	public:
	bool isEmpty(void){
		return _head == _tail;
	}
	bool isFull(void){
		return _size == DEFAULT_BUFFER_SIZE;
 3b0:	20 91 46 02 	lds	r18, 0x0246
 3b4:	30 91 47 02 	lds	r19, 0x0247
	}
	bool write(uint8_t newValue){
		if(isFull())
 3b8:	20 34       	cpi	r18, 0x40	; 64
 3ba:	31 05       	cpc	r19, r1
 3bc:	a9 f0       	breq	.+42     	; 0x3e8 <_ZN6Serial15writeToRxBufferEh+0x38>
			return false;
		_size++;
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	30 93 47 02 	sts	0x0247, r19
 3c6:	20 93 46 02 	sts	0x0246, r18
		_data[(_head++ % DEFAULT_BUFFER_SIZE)] = newValue;
 3ca:	e2 e4       	ldi	r30, 0x42	; 66
 3cc:	f2 e0       	ldi	r31, 0x02	; 2
 3ce:	20 81       	ld	r18, Z
 3d0:	31 81       	ldd	r19, Z+1	; 0x01
 3d2:	a9 01       	movw	r20, r18
 3d4:	4f 5f       	subi	r20, 0xFF	; 255
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255
 3d8:	51 83       	std	Z+1, r21	; 0x01
 3da:	40 83       	st	Z, r20
 3dc:	2f 73       	andi	r18, 0x3F	; 63
 3de:	33 27       	eor	r19, r19
 3e0:	f9 01       	movw	r30, r18
 3e2:	ee 5f       	subi	r30, 0xFE	; 254
 3e4:	fd 4f       	sbci	r31, 0xFD	; 253
 3e6:	80 83       	st	Z, r24
 3e8:	08 95       	ret

000003ea <_ZN6Serial16sendFromTxBufferEv>:
	uint8_t _data[DEFAULT_BUFFER_SIZE];
	unsigned int _head, _tail, _size;
	
	public:
	bool isEmpty(void){
		return _head == _tail;
 3ea:	80 91 8a 02 	lds	r24, 0x028A
 3ee:	90 91 8b 02 	lds	r25, 0x028B
		rxBuffer.write(val);
		//UDR0 = rxBuffer.read();
	}
	
	void Serial::sendFromTxBuffer(void){
		if(!txBuffer.isEmpty())
 3f2:	20 91 88 02 	lds	r18, 0x0288
 3f6:	30 91 89 02 	lds	r19, 0x0289
 3fa:	28 17       	cp	r18, r24
 3fc:	39 07       	cpc	r19, r25
 3fe:	b9 f0       	breq	.+46     	; 0x42e <_ZN6Serial16sendFromTxBufferEv+0x44>
		return true;
	}
	uint8_t read(void){
		if(isEmpty())
			return 0x00;
		_size--;
 400:	ec e8       	ldi	r30, 0x8C	; 140
 402:	f2 e0       	ldi	r31, 0x02	; 2
 404:	20 81       	ld	r18, Z
 406:	31 81       	ldd	r19, Z+1	; 0x01
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	31 09       	sbc	r19, r1
 40c:	31 83       	std	Z+1, r19	; 0x01
 40e:	20 83       	st	Z, r18
		return _data[_tail++ % DEFAULT_BUFFER_SIZE];
 410:	9c 01       	movw	r18, r24
 412:	2f 5f       	subi	r18, 0xFF	; 255
 414:	3f 4f       	sbci	r19, 0xFF	; 255
 416:	30 93 8b 02 	sts	0x028B, r19
 41a:	20 93 8a 02 	sts	0x028A, r18
 41e:	8f 73       	andi	r24, 0x3F	; 63
 420:	99 27       	eor	r25, r25
 422:	fc 01       	movw	r30, r24
 424:	e8 5b       	subi	r30, 0xB8	; 184
 426:	fd 4f       	sbci	r31, 0xFD	; 253
 428:	80 81       	ld	r24, Z
			UDR0 = txBuffer.read();
 42a:	80 93 c6 00 	sts	0x00C6, r24
 42e:	08 95       	ret

00000430 <__vector_25>:
	}

	ISR(USART0_RX_vect){
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	0b b6       	in	r0, 0x3b	; 59
 43c:	0f 92       	push	r0
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
		Serial::writeToRxBuffer(UDR0);
 456:	80 91 c6 00 	lds	r24, 0x00C6
 45a:	aa df       	rcall	.-172    	; 0x3b0 <_ZN6Serial15writeToRxBufferEh>
	}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0b be       	out	0x3b, r0	; 59
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_27>:

	ISR(USART0_TX_vect){
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	0b b6       	in	r0, 0x3b	; 59
 48e:	0f 92       	push	r0
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
		Serial::sendFromTxBuffer();
 4a8:	a0 df       	rcall	.-192    	; 0x3ea <_ZN6Serial16sendFromTxBufferEv>
	}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	7f 91       	pop	r23
 4b8:	6f 91       	pop	r22
 4ba:	5f 91       	pop	r21
 4bc:	4f 91       	pop	r20
 4be:	3f 91       	pop	r19
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0b be       	out	0x3b, r0	; 59
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <_ZN6Serial22serialEnableInterruptsEbb>:
	/*
	 * this does not disable interrupts if false
	 */
	void Serial::serialEnableInterrupts(bool rx, bool tx){
		//enable serial receive interrupt
		if(rx)
 4d0:	88 23       	and	r24, r24
 4d2:	81 f0       	breq	.+32     	; 0x4f4 <_ZN6Serial22serialEnableInterruptsEbb+0x24>
			UCSR0B |= (1 << RXCIE0);
 4d4:	e1 ec       	ldi	r30, 0xC1	; 193
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	80 83       	st	Z, r24
		//enable serial transmit interrupt
		if(tx){
 4de:	66 23       	and	r22, r22
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <_ZN6Serial22serialEnableInterruptsEbb+0x20>
			UCSR0B |= (1 << TXCIE0);
 4e2:	e1 ec       	ldi	r30, 0xC1	; 193
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	80 64       	ori	r24, 0x40	; 64
 4ea:	80 83       	st	Z, r24
			UDR0 = 0;
 4ec:	10 92 c6 00 	sts	0x00C6, r1
		}
		//enable global interrupt flag
		if(tx || rx)
			sei();
 4f0:	78 94       	sei
 4f2:	08 95       	ret
	void Serial::serialEnableInterrupts(bool rx, bool tx){
		//enable serial receive interrupt
		if(rx)
			UCSR0B |= (1 << RXCIE0);
		//enable serial transmit interrupt
		if(tx){
 4f4:	61 11       	cpse	r22, r1
 4f6:	f5 cf       	rjmp	.-22     	; 0x4e2 <_ZN6Serial22serialEnableInterruptsEbb+0x12>
 4f8:	08 95       	ret

000004fa <main>:
}

int main(void)
{
	//make 7SD pins output
	DDRC = (1 << SEVEN_SEGMENT_CLOCK) | (1 << SEVEN_SEGMENT_DATA) | (1 << SEVEN_SEGMENT_DATA_ENABLE);
 4fa:	8c e1       	ldi	r24, 0x1C	; 28
 4fc:	87 b9       	out	0x07, r24	; 7
	
	//set all to off state
	PORTC = 0x00;
 4fe:	18 b8       	out	0x08, r1	; 8

	//initialize serial, config is 57600:8N1
	Serial::serialInit();
 500:	42 df       	rcall	.-380    	; 0x386 <_ZN6Serial10serialInitEv>
	//enable serial interrupts for buffered processing
	Serial::serialEnableInterrupts(true, true);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	e4 df       	rcall	.-56     	; 0x4d0 <_ZN6Serial22serialEnableInterruptsEbb>
		Serial::serialWrite('s');
		Serial::serialWriteDecimal(err);
		Serial::serialWrite('\n');
		_delay_ms(150);	*/
		
		uint16_t test = ADConverter::readVoltageBlocking(0);
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0b de       	rcall	.-1002   	; 0x124 <_ZN11ADConverter19readVoltageBlockingEi>
		Serial::serialWriteDecimal(test);
 50e:	0c df       	rcall	.-488    	; 0x328 <_ZN6Serial18serialWriteDecimalEj>
		Serial::serialWrite('\n');
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	6c de       	rcall	.-808    	; 0x1ec <_ZN6Serial11serialWriteEh>
		Serial::serialWrite('\n');
		_delay_ms(50);
	}*/
	
	//do not return from main
	while(1){}
 514:	f9 cf       	rjmp	.-14     	; 0x508 <main+0xe>

00000516 <__utoa_ncheck>:
 516:	bb 27       	eor	r27, r27

00000518 <__utoa_common>:
 518:	fb 01       	movw	r30, r22
 51a:	55 27       	eor	r21, r21
 51c:	aa 27       	eor	r26, r26
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	aa 1f       	adc	r26, r26
 524:	a4 17       	cp	r26, r20
 526:	10 f0       	brcs	.+4      	; 0x52c <__utoa_common+0x14>
 528:	a4 1b       	sub	r26, r20
 52a:	83 95       	inc	r24
 52c:	50 51       	subi	r21, 0x10	; 16
 52e:	b9 f7       	brne	.-18     	; 0x51e <__utoa_common+0x6>
 530:	a0 5d       	subi	r26, 0xD0	; 208
 532:	aa 33       	cpi	r26, 0x3A	; 58
 534:	08 f0       	brcs	.+2      	; 0x538 <__utoa_common+0x20>
 536:	a9 5d       	subi	r26, 0xD9	; 217
 538:	a1 93       	st	Z+, r26
 53a:	00 97       	sbiw	r24, 0x00	; 0
 53c:	79 f7       	brne	.-34     	; 0x51c <__utoa_common+0x4>
 53e:	b1 11       	cpse	r27, r1
 540:	b1 93       	st	Z+, r27
 542:	11 92       	st	Z+, r1
 544:	cb 01       	movw	r24, r22
 546:	00 c0       	rjmp	.+0      	; 0x548 <strrev>

00000548 <strrev>:
 548:	dc 01       	movw	r26, r24
 54a:	fc 01       	movw	r30, r24
 54c:	67 2f       	mov	r22, r23
 54e:	71 91       	ld	r23, Z+
 550:	77 23       	and	r23, r23
 552:	e1 f7       	brne	.-8      	; 0x54c <strrev+0x4>
 554:	32 97       	sbiw	r30, 0x02	; 2
 556:	04 c0       	rjmp	.+8      	; 0x560 <strrev+0x18>
 558:	7c 91       	ld	r23, X
 55a:	6d 93       	st	X+, r22
 55c:	70 83       	st	Z, r23
 55e:	62 91       	ld	r22, -Z
 560:	ae 17       	cp	r26, r30
 562:	bf 07       	cpc	r27, r31
 564:	c8 f3       	brcs	.-14     	; 0x558 <strrev+0x10>
 566:	08 95       	ret

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>

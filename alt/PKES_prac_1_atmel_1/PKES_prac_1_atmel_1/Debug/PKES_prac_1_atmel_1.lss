
PKES_prac_1_atmel_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800200  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800282  00800282  000007f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001364  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000657  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a39  00000000  00000000  00002343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00002d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007be  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b7b  00000000  00000000  0000385e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000043d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	f6 c0       	rjmp	.+492    	; 0x252 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2b c1       	rjmp	.+598    	; 0x2c4 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 38       	cpi	r26, 0x82	; 130
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a2 e8       	ldi	r26, 0x82	; 130
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 31       	cpi	r26, 0x11	; 17
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	97 d2       	rcall	.+1326   	; 0x64e <main>
 120:	dd c2       	rjmp	.+1466   	; 0x6dc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z23isSerialDataAvailable_0v>:

/* Data available?
 * Bit 7 in UCSR0A is set when data is available and has not yet been read;
 */
bool isSerialDataAvailable_0(){
	return !rxBuffer.isEmpty();
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	40 91 08 03 	lds	r20, 0x0308
 12a:	50 91 09 03 	lds	r21, 0x0309
 12e:	20 91 0a 03 	lds	r18, 0x030A
 132:	30 91 0b 03 	lds	r19, 0x030B
 136:	42 17       	cp	r20, r18
 138:	53 07       	cpc	r21, r19
 13a:	09 f4       	brne	.+2      	; 0x13e <_Z23isSerialDataAvailable_0v+0x1a>
 13c:	80 e0       	ldi	r24, 0x00	; 0
	//return (SERIAL_0_STATUS & (1 << RXC0));//probably could remove comparison since bool just defines 0, 1 as false, true
}
 13e:	08 95       	ret

00000140 <_Z18isSerialDataSent_0v>:

/* Data sent?
 * Bit 6 in UCSR0A is set when all data has been transmitted;
 */
bool isSerialDataSent_0(){
	return (SERIAL_0_STATUS & (1 << UDRE0));
 140:	80 91 c0 00 	lds	r24, 0x00C0
}
 144:	85 fb       	bst	r24, 5
 146:	88 27       	eor	r24, r24
 148:	80 f9       	bld	r24, 0
 14a:	08 95       	ret

0000014c <_Z12readSerial_0v>:
	uint8_t _data[SERIAL_BUFFER_SIZE];
	unsigned int _head, _tail, _size;
	
	public:
	bool isEmpty(void){
		return _head == _tail;
 14c:	80 91 0a 03 	lds	r24, 0x030A
 150:	90 91 0b 03 	lds	r25, 0x030B
		_size++;
		_data[(_head++ % SERIAL_BUFFER_SIZE)] = newValue;
		return true;
	}
	uint8_t read(void){
		if(isEmpty())
 154:	20 91 08 03 	lds	r18, 0x0308
 158:	30 91 09 03 	lds	r19, 0x0309
 15c:	28 17       	cp	r18, r24
 15e:	39 07       	cpc	r19, r25
 160:	b1 f0       	breq	.+44     	; 0x18e <_Z12readSerial_0v+0x42>
			return 0x00;
		_size--;
 162:	ec e0       	ldi	r30, 0x0C	; 12
 164:	f3 e0       	ldi	r31, 0x03	; 3
 166:	20 81       	ld	r18, Z
 168:	31 81       	ldd	r19, Z+1	; 0x01
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	31 09       	sbc	r19, r1
 16e:	31 83       	std	Z+1, r19	; 0x01
 170:	20 83       	st	Z, r18
		return _data[_tail++ % SERIAL_BUFFER_SIZE];
 172:	9c 01       	movw	r18, r24
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	30 93 0b 03 	sts	0x030B, r19
 17c:	20 93 0a 03 	sts	0x030A, r18
 180:	8f 73       	andi	r24, 0x3F	; 63
 182:	99 27       	eor	r25, r25
 184:	fc 01       	movw	r30, r24
 186:	e8 53       	subi	r30, 0x38	; 56
 188:	fd 4f       	sbci	r31, 0xFD	; 253
 18a:	80 81       	ld	r24, Z
 18c:	08 95       	ret
		_data[(_head++ % SERIAL_BUFFER_SIZE)] = newValue;
		return true;
	}
	uint8_t read(void){
		if(isEmpty())
			return 0x00;
 18e:	80 e0       	ldi	r24, 0x00	; 0
/* 
 * Get data from serial rx buffer
 */
unsigned char readSerial_0(){
	return rxBuffer.read();
}
 190:	08 95       	ret

00000192 <_Z13writeSerial_0h>:

/*
 * Send a byte via serial. blocks until sent
 */
void writeSerial_0(unsigned char dataOut){
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
	while(!isSerialDataSent_0()) {}
 196:	d4 df       	rcall	.-88     	; 0x140 <_Z18isSerialDataSent_0v>
 198:	88 23       	and	r24, r24
 19a:	e9 f3       	breq	.-6      	; 0x196 <_Z13writeSerial_0h+0x4>
	UDR0 = dataOut;
 19c:	c0 93 c6 00 	sts	0x00C6, r28
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <_Z13writeSerial_0PKch>:

/*
 * send all given bytes via tx buffer
 */
void writeSerial_0(const char dataOut[], uint8_t size){
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	//because the transmit complete interrupt only fires when a transmit has been completed, we send the first byte
	//directly, and write the rest to the buffer
	if(size == 0)
 1ac:	66 23       	and	r22, r22
 1ae:	69 f1       	breq	.+90     	; 0x20a <_Z13writeSerial_0PKch+0x66>
 1b0:	c6 2f       	mov	r28, r22
 1b2:	8c 01       	movw	r16, r24
		return;	
	//write first byte
	writeSerial_0(dataOut[0]);
 1b4:	fc 01       	movw	r30, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	ec df       	rcall	.-40     	; 0x192 <_Z13writeSerial_0h>
	//write the rest to the buffer for the interrupt send routine to do its work
	for(int i = 1; i < size; i++)
 1ba:	8c 2f       	mov	r24, r28
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 97       	sbiw	r24, 0x02	; 2
 1c0:	24 f1       	brlt	.+72     	; 0x20a <_Z13writeSerial_0PKch+0x66>
 1c2:	d8 01       	movw	r26, r16
 1c4:	11 96       	adiw	r26, 0x01	; 1
 1c6:	c8 01       	movw	r24, r16
 1c8:	8c 0f       	add	r24, r28
 1ca:	91 1d       	adc	r25, r1
	public:
	bool isEmpty(void){
		return _head == _tail;
	}
	bool isFull(void){
		return _size == SERIAL_BUFFER_SIZE;
 1cc:	c6 ec       	ldi	r28, 0xC6	; 198
 1ce:	d2 e0       	ldi	r29, 0x02	; 2
	}
	bool write(uint8_t newValue){
		if(isFull())
			return false;
		_size++;
		_data[(_head++ % SERIAL_BUFFER_SIZE)] = newValue;
 1d0:	62 ec       	ldi	r22, 0xC2	; 194
 1d2:	72 e0       	ldi	r23, 0x02	; 2
		txBuffer.write(dataOut[i]);
 1d4:	4d 91       	ld	r20, X+
	public:
	bool isEmpty(void){
		return _head == _tail;
	}
	bool isFull(void){
		return _size == SERIAL_BUFFER_SIZE;
 1d6:	28 81       	ld	r18, Y
 1d8:	39 81       	ldd	r19, Y+1	; 0x01
	}
	bool write(uint8_t newValue){
		if(isFull())
 1da:	20 34       	cpi	r18, 0x40	; 64
 1dc:	31 05       	cpc	r19, r1
 1de:	91 f0       	breq	.+36     	; 0x204 <_Z13writeSerial_0PKch+0x60>
			return false;
		_size++;
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	39 83       	std	Y+1, r19	; 0x01
 1e6:	28 83       	st	Y, r18
		_data[(_head++ % SERIAL_BUFFER_SIZE)] = newValue;
 1e8:	fb 01       	movw	r30, r22
 1ea:	20 81       	ld	r18, Z
 1ec:	31 81       	ldd	r19, Z+1	; 0x01
 1ee:	89 01       	movw	r16, r18
 1f0:	0f 5f       	subi	r16, 0xFF	; 255
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	11 83       	std	Z+1, r17	; 0x01
 1f6:	00 83       	st	Z, r16
 1f8:	2f 73       	andi	r18, 0x3F	; 63
 1fa:	33 27       	eor	r19, r19
 1fc:	f9 01       	movw	r30, r18
 1fe:	ee 57       	subi	r30, 0x7E	; 126
 200:	fd 4f       	sbci	r31, 0xFD	; 253
 202:	40 83       	st	Z, r20
	if(size == 0)
		return;	
	//write first byte
	writeSerial_0(dataOut[0]);
	//write the rest to the buffer for the interrupt send routine to do its work
	for(int i = 1; i < size; i++)
 204:	a8 17       	cp	r26, r24
 206:	b9 07       	cpc	r27, r25
 208:	29 f7       	brne	.-54     	; 0x1d4 <_Z13writeSerial_0PKch+0x30>
		txBuffer.write(dataOut[i]);
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <_Z19writeSerialString_0PKc>:

/************************************************************************/
/* TERMINATE the string with a NUL char                                 */
/************************************************************************/
void writeSerialString_0(const char* dataOut){
	writeSerial_0(dataOut, strlen(dataOut));
 214:	fc 01       	movw	r30, r24
 216:	01 90       	ld	r0, Z+
 218:	00 20       	and	r0, r0
 21a:	e9 f7       	brne	.-6      	; 0x216 <_Z19writeSerialString_0PKc+0x2>
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	bf 01       	movw	r22, r30
 220:	68 1b       	sub	r22, r24
 222:	79 0b       	sbc	r23, r25
 224:	bf cf       	rjmp	.-130    	; 0x1a4 <_Z13writeSerial_0PKch>
 226:	08 95       	ret

00000228 <_Z12initSerial_0v>:
 * Initialize serial with the help of serial utilities provided by atmel in setbaud.h
 */
void initSerial_0(){
	//calculated by setbaud.h, which also checks for baud rate range and possible double speed mode
	//formula is (F_CPU/16/BAUD)-1 per data sheet
	UBRR0H = UBRRH_VALUE;//first byte into 
 228:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;//shift re
 22c:	82 e2       	ldi	r24, 0x22	; 34
 22e:	80 93 c4 00 	sts	0x00C4, r24
	
	//double baud rate?
	#if USE_2X
		UCSR0A |= (1 << U2X0);
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	80 83       	st	Z, r24
	#else
		UCSR0A &= ~(1 << U2X0);
	#endif
	
	//reset both config bytes, even though it does not make sense
	UCSR0C = 0x00;
 23c:	a2 ec       	ldi	r26, 0xC2	; 194
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	1c 92       	st	X, r1
	UCSR0B = 0x00;
 242:	e1 ec       	ldi	r30, 0xC1	; 193
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	10 82       	st	Z, r1
	
	//set 8 bits of data, no parity seems to be default
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	8c 93       	st	X, r24
	
	//enable RX, TX systems
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 24c:	88 e1       	ldi	r24, 0x18	; 24
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <__vector_25>:
	UCSZ01- "
	UCPOL0-clock polarity (e.g. transmit on falling/rising clock edge), only relevant for sync operation
	*/
}

ISR(USART0_RX_vect){
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	0b b6       	in	r0, 0x3b	; 59
 25e:	0f 92       	push	r0
 260:	2f 93       	push	r18
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	//eg read received byte from UDR0 to variable
	//char received = UDR0;
	//TODO: place byte in buffer
	//UDR0 = received;
	rxBuffer.write(UDR0);
 26e:	20 91 c6 00 	lds	r18, 0x00C6
	public:
	bool isEmpty(void){
		return _head == _tail;
	}
	bool isFull(void){
		return _size == SERIAL_BUFFER_SIZE;
 272:	80 91 0c 03 	lds	r24, 0x030C
 276:	90 91 0d 03 	lds	r25, 0x030D
	}
	bool write(uint8_t newValue){
		if(isFull())
 27a:	80 34       	cpi	r24, 0x40	; 64
 27c:	91 05       	cpc	r25, r1
 27e:	a1 f0       	breq	.+40     	; 0x2a8 <__vector_25+0x56>
			return false;
		_size++;
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 0d 03 	sts	0x030D, r25
 286:	80 93 0c 03 	sts	0x030C, r24
		_data[(_head++ % SERIAL_BUFFER_SIZE)] = newValue;
 28a:	e8 e0       	ldi	r30, 0x08	; 8
 28c:	f3 e0       	ldi	r31, 0x03	; 3
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	ac 01       	movw	r20, r24
 294:	4f 5f       	subi	r20, 0xFF	; 255
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	51 83       	std	Z+1, r21	; 0x01
 29a:	40 83       	st	Z, r20
 29c:	8f 73       	andi	r24, 0x3F	; 63
 29e:	99 27       	eor	r25, r25
 2a0:	fc 01       	movw	r30, r24
 2a2:	e8 53       	subi	r30, 0x38	; 56
 2a4:	fd 4f       	sbci	r31, 0xFD	; 253
 2a6:	20 83       	st	Z, r18
	//UDR0 = rxBuffer.read();
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0b be       	out	0x3b, r0	; 59
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_27>:

ISR(USART0_TX_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	uint8_t _data[SERIAL_BUFFER_SIZE];
	unsigned int _head, _tail, _size;
	
	public:
	bool isEmpty(void){
		return _head == _tail;
 2de:	80 91 c4 02 	lds	r24, 0x02C4
 2e2:	90 91 c5 02 	lds	r25, 0x02C5
	if(!txBuffer.isEmpty())
 2e6:	20 91 c2 02 	lds	r18, 0x02C2
 2ea:	30 91 c3 02 	lds	r19, 0x02C3
 2ee:	28 17       	cp	r18, r24
 2f0:	39 07       	cpc	r19, r25
 2f2:	b9 f0       	breq	.+46     	; 0x322 <__vector_27+0x5e>
		return true;
	}
	uint8_t read(void){
		if(isEmpty())
			return 0x00;
		_size--;
 2f4:	e6 ec       	ldi	r30, 0xC6	; 198
 2f6:	f2 e0       	ldi	r31, 0x02	; 2
 2f8:	20 81       	ld	r18, Z
 2fa:	31 81       	ldd	r19, Z+1	; 0x01
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	31 09       	sbc	r19, r1
 300:	31 83       	std	Z+1, r19	; 0x01
 302:	20 83       	st	Z, r18
		return _data[_tail++ % SERIAL_BUFFER_SIZE];
 304:	9c 01       	movw	r18, r24
 306:	2f 5f       	subi	r18, 0xFF	; 255
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	30 93 c5 02 	sts	0x02C5, r19
 30e:	20 93 c4 02 	sts	0x02C4, r18
 312:	8f 73       	andi	r24, 0x3F	; 63
 314:	99 27       	eor	r25, r25
 316:	fc 01       	movw	r30, r24
 318:	ee 57       	subi	r30, 0x7E	; 126
 31a:	fd 4f       	sbci	r31, 0xFD	; 253
 31c:	80 81       	ld	r24, Z
		UDR0 = txBuffer.read();
 31e:	80 93 c6 00 	sts	0x00C6, r24
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0b be       	out	0x3b, r0	; 59
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <_Z24enableSerialInterrupts_0bb>:
/*
 * this does not disable interrupts if false
 */
void enableSerialInterrupts_0(bool rx, bool tx){
	//enable serial receive interrupt
	if(rx)
 33c:	88 23       	and	r24, r24
 33e:	81 f0       	breq	.+32     	; 0x360 <_Z24enableSerialInterrupts_0bb+0x24>
		UCSR0B |= (1 << RXCIE0);
 340:	e1 ec       	ldi	r30, 0xC1	; 193
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 83       	st	Z, r24
	//enable serial transmit interrupt
	if(tx){
 34a:	66 23       	and	r22, r22
 34c:	39 f0       	breq	.+14     	; 0x35c <_Z24enableSerialInterrupts_0bb+0x20>
		UCSR0B |= (1 << TXCIE0);
 34e:	e1 ec       	ldi	r30, 0xC1	; 193
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	80 83       	st	Z, r24
		UDR0 = 0;
 358:	10 92 c6 00 	sts	0x00C6, r1
	}
	//enable global interrupt flag
	if(tx || rx)
		sei();
 35c:	78 94       	sei
 35e:	08 95       	ret
void enableSerialInterrupts_0(bool rx, bool tx){
	//enable serial receive interrupt
	if(rx)
		UCSR0B |= (1 << RXCIE0);
	//enable serial transmit interrupt
	if(tx){
 360:	61 11       	cpse	r22, r1
 362:	f5 cf       	rjmp	.-22     	; 0x34e <_Z24enableSerialInterrupts_0bb+0x12>
 364:	08 95       	ret

00000366 <_Z12writeDigitalPVhib>:
/*
 * Write high or low to a pin on a port
 * writeDigital(&PORTC, PC2, true)
 */
void writeDigital(volatile uint8_t* port, int pin, bool val){
	if(val)
 366:	44 23       	and	r20, r20
 368:	61 f0       	breq	.+24     	; 0x382 <_Z12writeDigitalPVhib+0x1c>
		*port |=  (1<<pin);//set bit
 36a:	fc 01       	movw	r30, r24
 36c:	40 81       	ld	r20, Z
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <_Z12writeDigitalPVhib+0x12>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <_Z12writeDigitalPVhib+0xe>
 37c:	24 2b       	or	r18, r20
 37e:	20 83       	st	Z, r18
 380:	08 95       	ret
	else
		*port &=~ (1<<pin);//delete bit
 382:	fc 01       	movw	r30, r24
 384:	40 81       	ld	r20, Z
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <_Z12writeDigitalPVhib+0x2a>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <_Z12writeDigitalPVhib+0x26>
 394:	20 95       	com	r18
 396:	24 23       	and	r18, r20
 398:	20 83       	st	Z, r18
 39a:	08 95       	ret

0000039c <_Z10send7SDBitb>:
/*
 * Write high or low to a pin on a port
 * writeDigital(&PORTC, PC2, true)
 */
void writeDigital(volatile uint8_t* port, int pin, bool val){
	if(val)
 39c:	88 23       	and	r24, r24
 39e:	11 f0       	breq	.+4      	; 0x3a4 <_Z10send7SDBitb+0x8>
		*port |=  (1<<pin);//set bit
 3a0:	43 9a       	sbi	0x08, 3	; 8
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <_Z10send7SDBitb+0xa>
	else
		*port &=~ (1<<pin);//delete bit
 3a4:	43 98       	cbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	8f e1       	ldi	r24, 0x1F	; 31
 3a8:	93 e0       	ldi	r25, 0x03	; 3
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <_Z10send7SDBitb+0xe>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <_Z10send7SDBitb+0x14>
 3b0:	00 00       	nop
 * Write high or low to a pin on a port
 * writeDigital(&PORTC, PC2, true)
 */
void writeDigital(volatile uint8_t* port, int pin, bool val){
	if(val)
		*port |=  (1<<pin);//set bit
 3b2:	42 9a       	sbi	0x08, 2	; 8
 3b4:	8f e1       	ldi	r24, 0x1F	; 31
 3b6:	93 e0       	ldi	r25, 0x03	; 3
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <_Z10send7SDBitb+0x1c>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <_Z10send7SDBitb+0x22>
 3be:	00 00       	nop
	else
		*port &=~ (1<<pin);//delete bit
 3c0:	42 98       	cbi	0x08, 2	; 8
 3c2:	08 95       	ret

000003c4 <_Z19send7SDTransmissionPh>:

/************************************************************************/
/* Send three data bytes to the display while							*/													
/* complying to the data sheet requirements of the display              */
/************************************************************************/
void send7SDTransmission(unsigned char dataBytes[]){
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	7c 01       	movw	r14, r24
 */
void writeDigital(volatile uint8_t* port, int pin, bool val){
	if(val)
		*port |=  (1<<pin);//set bit
	else
		*port &=~ (1<<pin);//delete bit
 3d6:	44 98       	cbi	0x08, 4	; 8
 3d8:	25 e0       	ldi	r18, 0x05	; 5
 3da:	2a 95       	dec	r18
 3dc:	f1 f7       	brne	.-4      	; 0x3da <_Z19send7SDTransmissionPh+0x16>
 3de:	00 00       	nop
	_delay_us(1);
	/*
	* BEGIN DATA ARRAY WRITE
	*/
	//per data sheet, send a 1 first
	send7SDBit(1);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	dc df       	rcall	.-72     	; 0x39c <_Z10send7SDBitb>
 3e4:	87 01       	movw	r16, r14
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	e8 0e       	add	r14, r24
 3ea:	f1 1c       	adc	r15, r1

/************************************************************************/
/* Send three data bytes to the display while							*/													
/* complying to the data sheet requirements of the display              */
/************************************************************************/
void send7SDTransmission(unsigned char dataBytes[]){
 3ec:	0f 2e       	mov	r0, r31
 3ee:	f7 e0       	ldi	r31, 0x07	; 7
 3f0:	cf 2e       	mov	r12, r31
 3f2:	f0 2d       	mov	r31, r0
 3f4:	d1 2c       	mov	r13, r1
 3f6:	12 c0       	rjmp	.+36     	; 0x41c <_Z19send7SDTransmissionPh+0x58>
	//send all three data bytes
	for(uint8_t digitPosition = 0; digitPosition < 3; digitPosition++){
		//sends a single digit
		for(int i = 7; i >= 0; i--){
			//high or low via bit shifting a mask
			bool val = (dataBytes[digitPosition] & (1 << i)) != 0;
 3f8:	f8 01       	movw	r30, r16
 3fa:	80 81       	ld	r24, Z
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0c 2e       	mov	r0, r28
 400:	02 c0       	rjmp	.+4      	; 0x406 <_Z19send7SDTransmissionPh+0x42>
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <_Z19send7SDTransmissionPh+0x3e>
			send7SDBit(val);
 40a:	81 70       	andi	r24, 0x01	; 1
 40c:	c7 df       	rcall	.-114    	; 0x39c <_Z10send7SDBitb>
	//per data sheet, send a 1 first
	send7SDBit(1);
	//send all three data bytes
	for(uint8_t digitPosition = 0; digitPosition < 3; digitPosition++){
		//sends a single digit
		for(int i = 7; i >= 0; i--){
 40e:	21 97       	sbiw	r28, 0x01	; 1
 410:	98 f7       	brcc	.-26     	; 0x3f8 <_Z19send7SDTransmissionPh+0x34>
 412:	0f 5f       	subi	r16, 0xFF	; 255
 414:	1f 4f       	sbci	r17, 0xFF	; 255
	* BEGIN DATA ARRAY WRITE
	*/
	//per data sheet, send a 1 first
	send7SDBit(1);
	//send all three data bytes
	for(uint8_t digitPosition = 0; digitPosition < 3; digitPosition++){
 416:	0e 15       	cp	r16, r14
 418:	1f 05       	cpc	r17, r15
 41a:	19 f0       	breq	.+6      	; 0x422 <_Z19send7SDTransmissionPh+0x5e>

/************************************************************************/
/* Send three data bytes to the display while							*/													
/* complying to the data sheet requirements of the display              */
/************************************************************************/
void send7SDTransmission(unsigned char dataBytes[]){
 41c:	cc 2d       	mov	r28, r12
 41e:	dd 2d       	mov	r29, r13
 420:	eb cf       	rjmp	.-42     	; 0x3f8 <_Z19send7SDTransmissionPh+0x34>
 422:	cc e0       	ldi	r28, 0x0C	; 12
 424:	d0 e0       	ldi	r29, 0x00	; 0
			send7SDBit(val);
		}
	}
	//send disregarded last 12 bits
	for(int i = 0; i < 12; i++)
		send7SDBit(0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	b9 df       	rcall	.-142    	; 0x39c <_Z10send7SDBitb>
 42a:	21 97       	sbiw	r28, 0x01	; 1
			bool val = (dataBytes[digitPosition] & (1 << i)) != 0;
			send7SDBit(val);
		}
	}
	//send disregarded last 12 bits
	for(int i = 0; i < 12; i++)
 42c:	e1 f7       	brne	.-8      	; 0x426 <_Z19send7SDTransmissionPh+0x62>
 * Write high or low to a pin on a port
 * writeDigital(&PORTC, PC2, true)
 */
void writeDigital(volatile uint8_t* port, int pin, bool val){
	if(val)
		*port |=  (1<<pin);//set bit
 42e:	44 9a       	sbi	0x08, 4	; 8
	/*
	* END DATA ARRAY WRITE
	*/
	//"write to display"
	writeDigital(&PORTC, SEVEN_SEGMENT_DATA_ENABLE, 1);
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	08 95       	ret

00000442 <_Z23displayFixedPointNumber18fixed_point_number>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	e8 2f       	mov	r30, r24
 44c:	36 2f       	mov	r19, r22
 44e:	27 2f       	mov	r18, r23
 450:	ce e0       	ldi	r28, 0x0E	; 14
 452:	d3 e0       	ldi	r29, 0x03	; 3
 454:	86 2f       	mov	r24, r22
 456:	97 2f       	mov	r25, r23
 458:	64 e6       	ldi	r22, 0x64	; 100
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	18 d1       	rcall	.+560    	; 0x68e <__divmodhi4>
 45e:	cb 01       	movw	r24, r22
 460:	0a e0       	ldi	r16, 0x0A	; 10
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	b8 01       	movw	r22, r16
 466:	13 d1       	rcall	.+550    	; 0x68e <__divmodhi4>
 468:	dc 01       	movw	r26, r24
 46a:	aa 58       	subi	r26, 0x8A	; 138
 46c:	bd 4f       	sbci	r27, 0xFD	; 253
 46e:	8c 91       	ld	r24, X
 470:	88 83       	st	Y, r24
 472:	83 2f       	mov	r24, r19
 474:	92 2f       	mov	r25, r18
 476:	b8 01       	movw	r22, r16
 478:	0a d1       	rcall	.+532    	; 0x68e <__divmodhi4>
 47a:	9c 01       	movw	r18, r24
 47c:	cb 01       	movw	r24, r22
 47e:	b8 01       	movw	r22, r16
 480:	06 d1       	rcall	.+524    	; 0x68e <__divmodhi4>
 482:	dc 01       	movw	r26, r24
 484:	aa 58       	subi	r26, 0x8A	; 138
 486:	bd 4f       	sbci	r27, 0xFD	; 253
 488:	8c 91       	ld	r24, X
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	d9 01       	movw	r26, r18
 48e:	aa 58       	subi	r26, 0x8A	; 138
 490:	bd 4f       	sbci	r27, 0xFD	; 253
 492:	8c 91       	ld	r24, X
 494:	8a 83       	std	Y+2, r24	; 0x02
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	e2 5f       	subi	r30, 0xF2	; 242
 49a:	fc 4f       	sbci	r31, 0xFC	; 252
 49c:	80 81       	ld	r24, Z
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	80 83       	st	Z, r24
 4a2:	ce 01       	movw	r24, r28
 4a4:	8f df       	rcall	.-226    	; 0x3c4 <_Z19send7SDTransmissionPh>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <_Z10saveNumberi>:
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	9c 01       	movw	r18, r24
 4b6:	18 16       	cp	r1, r24
 4b8:	19 06       	cpc	r1, r25
 4ba:	0c f5       	brge	.+66     	; 0x4fe <_Z10saveNumberi+0x4e>
 4bc:	ee e0       	ldi	r30, 0x0E	; 14
 4be:	f3 e0       	ldi	r31, 0x03	; 3
 4c0:	64 e6       	ldi	r22, 0x64	; 100
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	e4 d0       	rcall	.+456    	; 0x68e <__divmodhi4>
 4c6:	cb 01       	movw	r24, r22
 4c8:	ca e0       	ldi	r28, 0x0A	; 10
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
 4cc:	be 01       	movw	r22, r28
 4ce:	df d0       	rcall	.+446    	; 0x68e <__divmodhi4>
 4d0:	dc 01       	movw	r26, r24
 4d2:	aa 58       	subi	r26, 0x8A	; 138
 4d4:	bd 4f       	sbci	r27, 0xFD	; 253
 4d6:	8c 91       	ld	r24, X
 4d8:	80 83       	st	Z, r24
 4da:	c9 01       	movw	r24, r18
 4dc:	be 01       	movw	r22, r28
 4de:	d7 d0       	rcall	.+430    	; 0x68e <__divmodhi4>
 4e0:	9c 01       	movw	r18, r24
 4e2:	cb 01       	movw	r24, r22
 4e4:	be 01       	movw	r22, r28
 4e6:	d3 d0       	rcall	.+422    	; 0x68e <__divmodhi4>
 4e8:	dc 01       	movw	r26, r24
 4ea:	aa 58       	subi	r26, 0x8A	; 138
 4ec:	bd 4f       	sbci	r27, 0xFD	; 253
 4ee:	8c 91       	ld	r24, X
 4f0:	81 83       	std	Z+1, r24	; 0x01
 4f2:	d9 01       	movw	r26, r18
 4f4:	aa 58       	subi	r26, 0x8A	; 138
 4f6:	bd 4f       	sbci	r27, 0xFD	; 253
 4f8:	8c 91       	ld	r24, X
 4fa:	82 83       	std	Z+2, r24	; 0x02
 4fc:	39 c0       	rjmp	.+114    	; 0x570 <_Z10saveNumberi+0xc0>
 4fe:	2d 39       	cpi	r18, 0x9D	; 157
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	38 07       	cpc	r19, r24
 504:	dc f0       	brlt	.+54     	; 0x53c <_Z10saveNumberi+0x8c>
 506:	ee e0       	ldi	r30, 0x0E	; 14
 508:	f3 e0       	ldi	r31, 0x03	; 3
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	80 83       	st	Z, r24
 50e:	88 27       	eor	r24, r24
 510:	99 27       	eor	r25, r25
 512:	82 1b       	sub	r24, r18
 514:	93 0b       	sbc	r25, r19
 516:	ca e0       	ldi	r28, 0x0A	; 10
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	be 01       	movw	r22, r28
 51c:	b8 d0       	rcall	.+368    	; 0x68e <__divmodhi4>
 51e:	9c 01       	movw	r18, r24
 520:	cb 01       	movw	r24, r22
 522:	be 01       	movw	r22, r28
 524:	b4 d0       	rcall	.+360    	; 0x68e <__divmodhi4>
 526:	dc 01       	movw	r26, r24
 528:	aa 58       	subi	r26, 0x8A	; 138
 52a:	bd 4f       	sbci	r27, 0xFD	; 253
 52c:	8c 91       	ld	r24, X
 52e:	81 83       	std	Z+1, r24	; 0x01
 530:	d9 01       	movw	r26, r18
 532:	aa 58       	subi	r26, 0x8A	; 138
 534:	bd 4f       	sbci	r27, 0xFD	; 253
 536:	8c 91       	ld	r24, X
 538:	82 83       	std	Z+2, r24	; 0x02
 53a:	1a c0       	rjmp	.+52     	; 0x570 <_Z10saveNumberi+0xc0>
 53c:	ee e0       	ldi	r30, 0x0E	; 14
 53e:	f3 e0       	ldi	r31, 0x03	; 3
 540:	82 e6       	ldi	r24, 0x62	; 98
 542:	80 83       	st	Z, r24
 544:	88 27       	eor	r24, r24
 546:	99 27       	eor	r25, r25
 548:	82 1b       	sub	r24, r18
 54a:	93 0b       	sbc	r25, r19
 54c:	ca e0       	ldi	r28, 0x0A	; 10
 54e:	d0 e0       	ldi	r29, 0x00	; 0
 550:	be 01       	movw	r22, r28
 552:	9d d0       	rcall	.+314    	; 0x68e <__divmodhi4>
 554:	9c 01       	movw	r18, r24
 556:	cb 01       	movw	r24, r22
 558:	be 01       	movw	r22, r28
 55a:	99 d0       	rcall	.+306    	; 0x68e <__divmodhi4>
 55c:	dc 01       	movw	r26, r24
 55e:	aa 58       	subi	r26, 0x8A	; 138
 560:	bd 4f       	sbci	r27, 0xFD	; 253
 562:	8c 91       	ld	r24, X
 564:	81 83       	std	Z+1, r24	; 0x01
 566:	d9 01       	movw	r26, r18
 568:	aa 58       	subi	r26, 0x8A	; 138
 56a:	bd 4f       	sbci	r27, 0xFD	; 253
 56c:	8c 91       	ld	r24, X
 56e:	82 83       	std	Z+2, r24	; 0x02
 570:	8e e0       	ldi	r24, 0x0E	; 14
 572:	93 e0       	ldi	r25, 0x03	; 3
 574:	27 df       	rcall	.-434    	; 0x3c4 <_Z19send7SDTransmissionPh>
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <_Z15countWithSerialv>:
 57c:	b1 2c       	mov	r11, r1
 57e:	ee 24       	eor	r14, r14
 580:	ea 94       	dec	r14
 582:	fe 2c       	mov	r15, r14
 584:	04 e6       	ldi	r16, 0x64	; 100
 586:	10 e0       	ldi	r17, 0x00	; 0
 588:	aa 24       	eor	r10, r10
 58a:	a3 94       	inc	r10
 58c:	0f 2e       	mov	r0, r31
 58e:	f4 e6       	ldi	r31, 0x64	; 100
 590:	cf 2e       	mov	r12, r31
 592:	d1 2c       	mov	r13, r1
 594:	f0 2d       	mov	r31, r0
 596:	91 2c       	mov	r9, r1
 598:	77 24       	eor	r7, r7
 59a:	7a 94       	dec	r7
 59c:	88 24       	eor	r8, r8
 59e:	8a 94       	dec	r8
 5a0:	55 24       	eor	r5, r5
 5a2:	53 94       	inc	r5
 5a4:	61 2c       	mov	r6, r1
 5a6:	be dd       	rcall	.-1156   	; 0x124 <_Z23isSerialDataAvailable_0v>
 5a8:	88 23       	and	r24, r24
 5aa:	b1 f0       	breq	.+44     	; 0x5d8 <_Z15countWithSerialv+0x5c>
 5ac:	cf dd       	rcall	.-1122   	; 0x14c <_Z12readSerial_0v>
 5ae:	86 34       	cpi	r24, 0x46	; 70
 5b0:	41 f0       	breq	.+16     	; 0x5c2 <_Z15countWithSerialv+0x46>
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <_Z15countWithSerialv+0x3e>
 5b4:	83 34       	cpi	r24, 0x43	; 67
 5b6:	49 f0       	breq	.+18     	; 0x5ca <_Z15countWithSerialv+0x4e>
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <_Z15countWithSerialv+0x56>
 5ba:	83 36       	cpi	r24, 0x63	; 99
 5bc:	31 f0       	breq	.+12     	; 0x5ca <_Z15countWithSerialv+0x4e>
 5be:	86 36       	cpi	r24, 0x66	; 102
 5c0:	41 f4       	brne	.+16     	; 0x5d2 <_Z15countWithSerialv+0x56>
 5c2:	85 e0       	ldi	r24, 0x05	; 5
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	26 de       	rcall	.-948    	; 0x214 <_Z19writeSerialString_0PKc>
 5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <_Z15countWithSerialv+0x6a>
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	22 de       	rcall	.-956    	; 0x214 <_Z19writeSerialString_0PKc>
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <_Z15countWithSerialv+0x60>
 5d2:	83 e1       	ldi	r24, 0x13	; 19
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	1e de       	rcall	.-964    	; 0x214 <_Z19writeSerialString_0PKc>
 5d8:	b1 10       	cpse	r11, r1
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <_Z15countWithSerialv+0x6a>
 5dc:	c8 01       	movw	r24, r16
 5de:	68 df       	rcall	.-304    	; 0x4b0 <_Z10saveNumberi>
 5e0:	e8 01       	movw	r28, r16
 5e2:	b9 2c       	mov	r11, r9
 5e4:	1a c0       	rjmp	.+52     	; 0x61a <_Z15countWithSerialv+0x9e>
 5e6:	e8 01       	movw	r28, r16
 5e8:	11 23       	and	r17, r17
 5ea:	24 f4       	brge	.+8      	; 0x5f4 <_Z15countWithSerialv+0x78>
 5ec:	cc 27       	eor	r28, r28
 5ee:	dd 27       	eor	r29, r29
 5f0:	c0 1b       	sub	r28, r16
 5f2:	d1 0b       	sbc	r29, r17
 5f4:	cc 32       	cpi	r28, 0x2C	; 44
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	d2 07       	cpc	r29, r18
 5fa:	2c f4       	brge	.+10     	; 0x606 <_Z15countWithSerialv+0x8a>
 5fc:	ce 01       	movw	r24, r28
 5fe:	b6 01       	movw	r22, r12
 600:	46 d0       	rcall	.+140    	; 0x68e <__divmodhi4>
 602:	86 2f       	mov	r24, r22
 604:	01 c0       	rjmp	.+2      	; 0x608 <_Z15countWithSerialv+0x8c>
 606:	8a 2d       	mov	r24, r10
 608:	6c 2f       	mov	r22, r28
 60a:	7d 2f       	mov	r23, r29
 60c:	11 23       	and	r17, r17
 60e:	1c f4       	brge	.+6      	; 0x616 <_Z15countWithSerialv+0x9a>
 610:	d1 95       	neg	r29
 612:	c1 95       	neg	r28
 614:	d1 09       	sbc	r29, r1
 616:	15 df       	rcall	.-470    	; 0x442 <_Z23displayFixedPointNumber18fixed_point_number>
 618:	ba 2c       	mov	r11, r10
 61a:	c7 3e       	cpi	r28, 0xE7	; 231
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	d8 07       	cpc	r29, r24
 620:	39 f0       	breq	.+14     	; 0x630 <_Z15countWithSerialv+0xb4>
 622:	c9 33       	cpi	r28, 0x39	; 57
 624:	9f ef       	ldi	r25, 0xFF	; 255
 626:	d9 07       	cpc	r29, r25
 628:	29 f4       	brne	.+10     	; 0x634 <_Z15countWithSerialv+0xb8>
 62a:	e5 2c       	mov	r14, r5
 62c:	f6 2c       	mov	r15, r6
 62e:	02 c0       	rjmp	.+4      	; 0x634 <_Z15countWithSerialv+0xb8>
 630:	e7 2c       	mov	r14, r7
 632:	f8 2c       	mov	r15, r8
 634:	8e 01       	movw	r16, r28
 636:	0e 0d       	add	r16, r14
 638:	1f 1d       	adc	r17, r15
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	89 ef       	ldi	r24, 0xF9	; 249
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	21 50       	subi	r18, 0x01	; 1
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	90 40       	sbci	r25, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <_Z15countWithSerialv+0xc4>
 648:	00 c0       	rjmp	.+0      	; 0x64a <_Z15countWithSerialv+0xce>
 64a:	00 00       	nop
 64c:	ac cf       	rjmp	.-168    	; 0x5a6 <_Z15countWithSerialv+0x2a>

0000064e <main>:
}

int main(void)
{
    //make led pins output
	writeDigital(&DDRA, LED_2, true);
 64e:	41 e0       	ldi	r20, 0x01	; 1
 650:	65 e0       	ldi	r22, 0x05	; 5
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	81 e2       	ldi	r24, 0x21	; 33
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	86 de       	rcall	.-756    	; 0x366 <_Z12writeDigitalPVhib>
	writeDigital(&DDRA, LED_3, true);
 65a:	41 e0       	ldi	r20, 0x01	; 1
 65c:	64 e0       	ldi	r22, 0x04	; 4
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	81 e2       	ldi	r24, 0x21	; 33
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	80 de       	rcall	.-768    	; 0x366 <_Z12writeDigitalPVhib>
	
	//make 7SD pins output
	DDRC = (1 << SEVEN_SEGMENT_CLOCK) | (1 << SEVEN_SEGMENT_DATA) | (1 << SEVEN_SEGMENT_DATA_ENABLE);
 666:	8c e1       	ldi	r24, 0x1C	; 28
 668:	87 b9       	out	0x07, r24	; 7
	
	//set all to off state
	PORTC = 0x00;
 66a:	18 b8       	out	0x08, r1	; 8
	PORTA = 0x00;
 66c:	12 b8       	out	0x02, r1	; 2
	
	//initialize data array
	data[0] = SEVEN_SEGMENT_NUMBERS[0];
 66e:	ee e0       	ldi	r30, 0x0E	; 14
 670:	f3 e0       	ldi	r31, 0x03	; 3
 672:	8c ef       	ldi	r24, 0xFC	; 252
 674:	80 83       	st	Z, r24
	data[1] = SEVEN_SEGMENT_NUMBERS[1];
 676:	80 e6       	ldi	r24, 0x60	; 96
 678:	81 83       	std	Z+1, r24	; 0x01
	data[2] = SEVEN_SEGMENT_NUMBERS[2];
 67a:	8a ed       	ldi	r24, 0xDA	; 218
 67c:	82 83       	std	Z+2, r24	; 0x02
	
	//initialize serial, config is 57600:8N1
	initSerial_0();
 67e:	d4 dd       	rcall	.-1112   	; 0x228 <_Z12initSerial_0v>
	
	//why do i need this??
	hello[1] = 5;
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	80 93 01 02 	sts	0x0201, r24
	
	//so self-documenting code
	enableSerialInterrupts_0(true, true);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	58 de       	rcall	.-848    	; 0x33c <_Z24enableSerialInterrupts_0bb>
	
	//testSerial();
	
	//word();
	
	countWithSerial();
 68c:	77 df       	rcall	.-274    	; 0x57c <_Z15countWithSerialv>

0000068e <__divmodhi4>:
 68e:	97 fb       	bst	r25, 7
 690:	07 2e       	mov	r0, r23
 692:	16 f4       	brtc	.+4      	; 0x698 <__divmodhi4+0xa>
 694:	00 94       	com	r0
 696:	06 d0       	rcall	.+12     	; 0x6a4 <__divmodhi4_neg1>
 698:	77 fd       	sbrc	r23, 7
 69a:	08 d0       	rcall	.+16     	; 0x6ac <__divmodhi4_neg2>
 69c:	0b d0       	rcall	.+22     	; 0x6b4 <__udivmodhi4>
 69e:	07 fc       	sbrc	r0, 7
 6a0:	05 d0       	rcall	.+10     	; 0x6ac <__divmodhi4_neg2>
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__divmodhi4_exit>

000006a4 <__divmodhi4_neg1>:
 6a4:	90 95       	com	r25
 6a6:	81 95       	neg	r24
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	08 95       	ret

000006ac <__divmodhi4_neg2>:
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255

000006b2 <__divmodhi4_exit>:
 6b2:	08 95       	ret

000006b4 <__udivmodhi4>:
 6b4:	aa 1b       	sub	r26, r26
 6b6:	bb 1b       	sub	r27, r27
 6b8:	51 e1       	ldi	r21, 0x11	; 17
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <__udivmodhi4_ep>

000006bc <__udivmodhi4_loop>:
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	a6 17       	cp	r26, r22
 6c2:	b7 07       	cpc	r27, r23
 6c4:	10 f0       	brcs	.+4      	; 0x6ca <__udivmodhi4_ep>
 6c6:	a6 1b       	sub	r26, r22
 6c8:	b7 0b       	sbc	r27, r23

000006ca <__udivmodhi4_ep>:
 6ca:	88 1f       	adc	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	5a 95       	dec	r21
 6d0:	a9 f7       	brne	.-22     	; 0x6bc <__udivmodhi4_loop>
 6d2:	80 95       	com	r24
 6d4:	90 95       	com	r25
 6d6:	bc 01       	movw	r22, r24
 6d8:	cd 01       	movw	r24, r26
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>


PKES_prac_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800200  00800200  00000590  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001908  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075a  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  000027b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00003318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000890  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001162  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	16 c1       	rjmp	.+556    	; 0x292 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4b c1       	rjmp	.+662    	; 0x304 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e1       	ldi	r30, 0x1C	; 28
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 38       	cpi	r26, 0x8C	; 140
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ae d1       	rcall	.+860    	; 0x47c <main>
 120:	fb c1       	rjmp	.+1014   	; 0x518 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z18isSerialDataSent_0v>:
	char resultString[numberOfDigits];
	//convert to string
	itoa(val, resultString, 10);
	//write to serial
	writeSerialString_0(resultString);
}
 124:	80 91 c0 00 	lds	r24, 0x00C0
 128:	85 fb       	bst	r24, 5
 12a:	88 27       	eor	r24, r24
 12c:	80 f9       	bld	r24, 0
 12e:	08 95       	ret

00000130 <_Z13writeSerial_0h>:
 130:	20 91 44 02 	lds	r18, 0x0244
 134:	30 91 45 02 	lds	r19, 0x0245
 138:	20 34       	cpi	r18, 0x40	; 64
 13a:	31 05       	cpc	r19, r1
 13c:	a9 f0       	breq	.+42     	; 0x168 <_Z13writeSerial_0h+0x38>
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	30 93 45 02 	sts	0x0245, r19
 146:	20 93 44 02 	sts	0x0244, r18
 14a:	e0 e4       	ldi	r30, 0x40	; 64
 14c:	f2 e0       	ldi	r31, 0x02	; 2
 14e:	20 81       	ld	r18, Z
 150:	31 81       	ldd	r19, Z+1	; 0x01
 152:	a9 01       	movw	r20, r18
 154:	4f 5f       	subi	r20, 0xFF	; 255
 156:	5f 4f       	sbci	r21, 0xFF	; 255
 158:	51 83       	std	Z+1, r21	; 0x01
 15a:	40 83       	st	Z, r20
 15c:	2f 73       	andi	r18, 0x3F	; 63
 15e:	33 27       	eor	r19, r19
 160:	f9 01       	movw	r30, r18
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <_Z17serialDirectWriteh>:
 16a:	cf 93       	push	r28
 16c:	c8 2f       	mov	r28, r24
 16e:	da df       	rcall	.-76     	; 0x124 <_Z18isSerialDataSent_0v>
 170:	88 23       	and	r24, r24
 172:	e9 f3       	breq	.-6      	; 0x16e <_Z17serialDirectWriteh+0x4>
 174:	c0 93 c6 00 	sts	0x00C6, r28
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <_Z13writeSerial_0PKch>:
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	66 23       	and	r22, r22
 186:	09 f4       	brne	.+2      	; 0x18a <_Z13writeSerial_0PKch+0xe>
 188:	60 c0       	rjmp	.+192    	; 0x24a <_Z13writeSerial_0PKch+0xce>
 18a:	40 91 40 02 	lds	r20, 0x0240
 18e:	50 91 41 02 	lds	r21, 0x0241
 192:	20 91 42 02 	lds	r18, 0x0242
 196:	30 91 43 02 	lds	r19, 0x0243
 19a:	42 17       	cp	r20, r18
 19c:	53 07       	cpc	r21, r19
 19e:	19 f0       	breq	.+6      	; 0x1a6 <_Z13writeSerial_0PKch+0x2a>
 1a0:	61 11       	cpse	r22, r1
 1a2:	30 c0       	rjmp	.+96     	; 0x204 <_Z13writeSerial_0PKch+0x88>
 1a4:	52 c0       	rjmp	.+164    	; 0x24a <_Z13writeSerial_0PKch+0xce>
 1a6:	c6 2f       	mov	r28, r22
 1a8:	8c 01       	movw	r16, r24
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	dd df       	rcall	.-70     	; 0x16a <_Z17serialDirectWriteh>
 1b0:	8c 2f       	mov	r24, r28
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 97       	sbiw	r24, 0x02	; 2
 1b6:	0c f4       	brge	.+2      	; 0x1ba <_Z13writeSerial_0PKch+0x3e>
 1b8:	48 c0       	rjmp	.+144    	; 0x24a <_Z13writeSerial_0PKch+0xce>
 1ba:	d8 01       	movw	r26, r16
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	c8 01       	movw	r24, r16
 1c0:	8c 0f       	add	r24, r28
 1c2:	91 1d       	adc	r25, r1
 1c4:	c4 e4       	ldi	r28, 0x44	; 68
 1c6:	d2 e0       	ldi	r29, 0x02	; 2
 1c8:	60 e4       	ldi	r22, 0x40	; 64
 1ca:	72 e0       	ldi	r23, 0x02	; 2
 1cc:	4d 91       	ld	r20, X+
 1ce:	28 81       	ld	r18, Y
 1d0:	39 81       	ldd	r19, Y+1	; 0x01
 1d2:	20 34       	cpi	r18, 0x40	; 64
 1d4:	31 05       	cpc	r19, r1
 1d6:	91 f0       	breq	.+36     	; 0x1fc <_Z13writeSerial_0PKch+0x80>
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	39 83       	std	Y+1, r19	; 0x01
 1de:	28 83       	st	Y, r18
 1e0:	fb 01       	movw	r30, r22
 1e2:	20 81       	ld	r18, Z
 1e4:	31 81       	ldd	r19, Z+1	; 0x01
 1e6:	89 01       	movw	r16, r18
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
 1ec:	11 83       	std	Z+1, r17	; 0x01
 1ee:	00 83       	st	Z, r16
 1f0:	2f 73       	andi	r18, 0x3F	; 63
 1f2:	33 27       	eor	r19, r19
 1f4:	f9 01       	movw	r30, r18
 1f6:	e0 50       	subi	r30, 0x00	; 0
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	40 83       	st	Z, r20
 1fc:	a8 17       	cp	r26, r24
 1fe:	b9 07       	cpc	r27, r25
 200:	29 f7       	brne	.-54     	; 0x1cc <_Z13writeSerial_0PKch+0x50>
 202:	23 c0       	rjmp	.+70     	; 0x24a <_Z13writeSerial_0PKch+0xce>
 204:	dc 01       	movw	r26, r24
 206:	ac 01       	movw	r20, r24
 208:	46 0f       	add	r20, r22
 20a:	51 1d       	adc	r21, r1
 20c:	c4 e4       	ldi	r28, 0x44	; 68
 20e:	d2 e0       	ldi	r29, 0x02	; 2
 210:	60 e4       	ldi	r22, 0x40	; 64
 212:	72 e0       	ldi	r23, 0x02	; 2
 214:	9d 91       	ld	r25, X+
 216:	28 81       	ld	r18, Y
 218:	39 81       	ldd	r19, Y+1	; 0x01
 21a:	20 34       	cpi	r18, 0x40	; 64
 21c:	31 05       	cpc	r19, r1
 21e:	91 f0       	breq	.+36     	; 0x244 <_Z13writeSerial_0PKch+0xc8>
 220:	2f 5f       	subi	r18, 0xFF	; 255
 222:	3f 4f       	sbci	r19, 0xFF	; 255
 224:	39 83       	std	Y+1, r19	; 0x01
 226:	28 83       	st	Y, r18
 228:	fb 01       	movw	r30, r22
 22a:	20 81       	ld	r18, Z
 22c:	31 81       	ldd	r19, Z+1	; 0x01
 22e:	89 01       	movw	r16, r18
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
 234:	11 83       	std	Z+1, r17	; 0x01
 236:	00 83       	st	Z, r16
 238:	2f 73       	andi	r18, 0x3F	; 63
 23a:	33 27       	eor	r19, r19
 23c:	f9 01       	movw	r30, r18
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	90 83       	st	Z, r25
 244:	a4 17       	cp	r26, r20
 246:	b5 07       	cpc	r27, r21
 248:	29 f7       	brne	.-54     	; 0x214 <_Z13writeSerial_0PKch+0x98>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <_Z19writeSerialString_0PKc>:
 254:	fc 01       	movw	r30, r24
 256:	01 90       	ld	r0, Z+
 258:	00 20       	and	r0, r0
 25a:	e9 f7       	brne	.-6      	; 0x256 <_Z19writeSerialString_0PKc+0x2>
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	bf 01       	movw	r22, r30
 260:	68 1b       	sub	r22, r24
 262:	79 0b       	sbc	r23, r25
 264:	8b cf       	rjmp	.-234    	; 0x17c <_Z13writeSerial_0PKch>
 266:	08 95       	ret

00000268 <_Z12initSerial_0v>:
 268:	10 92 c5 00 	sts	0x00C5, r1
 26c:	82 e2       	ldi	r24, 0x22	; 34
 26e:	80 93 c4 00 	sts	0x00C4, r24
 272:	e0 ec       	ldi	r30, 0xC0	; 192
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
 27c:	a2 ec       	ldi	r26, 0xC2	; 194
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	1c 92       	st	X, r1
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	10 82       	st	Z, r1
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	8c 93       	st	X, r24
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <__vector_25>:
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	0b b6       	in	r0, 0x3b	; 59
 29e:	0f 92       	push	r0
 2a0:	2f 93       	push	r18
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
 2ae:	20 91 c6 00 	lds	r18, 0x00C6
 2b2:	80 91 8a 02 	lds	r24, 0x028A
 2b6:	90 91 8b 02 	lds	r25, 0x028B
 2ba:	80 34       	cpi	r24, 0x40	; 64
 2bc:	91 05       	cpc	r25, r1
 2be:	a1 f0       	breq	.+40     	; 0x2e8 <__vector_25+0x56>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 8b 02 	sts	0x028B, r25
 2c6:	80 93 8a 02 	sts	0x028A, r24
 2ca:	e6 e8       	ldi	r30, 0x86	; 134
 2cc:	f2 e0       	ldi	r31, 0x02	; 2
 2ce:	80 81       	ld	r24, Z
 2d0:	91 81       	ldd	r25, Z+1	; 0x01
 2d2:	ac 01       	movw	r20, r24
 2d4:	4f 5f       	subi	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	51 83       	std	Z+1, r21	; 0x01
 2da:	40 83       	st	Z, r20
 2dc:	8f 73       	andi	r24, 0x3F	; 63
 2de:	99 27       	eor	r25, r25
 2e0:	fc 01       	movw	r30, r24
 2e2:	ea 5b       	subi	r30, 0xBA	; 186
 2e4:	fd 4f       	sbci	r31, 0xFD	; 253
 2e6:	20 83       	st	Z, r18
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0b be       	out	0x3b, r0	; 59
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_27>:
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	0b b6       	in	r0, 0x3b	; 59
 310:	0f 92       	push	r0
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
 31e:	80 91 42 02 	lds	r24, 0x0242
 322:	90 91 43 02 	lds	r25, 0x0243
 326:	20 91 40 02 	lds	r18, 0x0240
 32a:	30 91 41 02 	lds	r19, 0x0241
 32e:	28 17       	cp	r18, r24
 330:	39 07       	cpc	r19, r25
 332:	b9 f0       	breq	.+46     	; 0x362 <__vector_27+0x5e>
 334:	e4 e4       	ldi	r30, 0x44	; 68
 336:	f2 e0       	ldi	r31, 0x02	; 2
 338:	20 81       	ld	r18, Z
 33a:	31 81       	ldd	r19, Z+1	; 0x01
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	31 09       	sbc	r19, r1
 340:	31 83       	std	Z+1, r19	; 0x01
 342:	20 83       	st	Z, r18
 344:	9c 01       	movw	r18, r24
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	30 93 43 02 	sts	0x0243, r19
 34e:	20 93 42 02 	sts	0x0242, r18
 352:	8f 73       	andi	r24, 0x3F	; 63
 354:	99 27       	eor	r25, r25
 356:	fc 01       	movw	r30, r24
 358:	e0 50       	subi	r30, 0x00	; 0
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	80 81       	ld	r24, Z
 35e:	80 93 c6 00 	sts	0x00C6, r24
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0b be       	out	0x3b, r0	; 59
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <_Z24enableSerialInterrupts_0bb>:
 37c:	88 23       	and	r24, r24
 37e:	81 f0       	breq	.+32     	; 0x3a0 <_Z24enableSerialInterrupts_0bb+0x24>
 380:	e1 ec       	ldi	r30, 0xC1	; 193
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 68       	ori	r24, 0x80	; 128
 388:	80 83       	st	Z, r24
 38a:	66 23       	and	r22, r22
 38c:	39 f0       	breq	.+14     	; 0x39c <_Z24enableSerialInterrupts_0bb+0x20>
 38e:	e1 ec       	ldi	r30, 0xC1	; 193
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	80 64       	ori	r24, 0x40	; 64
 396:	80 83       	st	Z, r24
 398:	10 92 c6 00 	sts	0x00C6, r1
 39c:	78 94       	sei
 39e:	08 95       	ret
 3a0:	61 11       	cpse	r22, r1
 3a2:	f5 cf       	rjmp	.-22     	; 0x38e <_Z24enableSerialInterrupts_0bb+0x12>
 3a4:	08 95       	ret

000003a6 <_Z12writeDigitalPVhib>:
 3a6:	44 23       	and	r20, r20
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <_Z12writeDigitalPVhib+0x1c>
 3aa:	fc 01       	movw	r30, r24
 3ac:	40 81       	ld	r20, Z
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <_Z12writeDigitalPVhib+0x12>
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <_Z12writeDigitalPVhib+0xe>
 3bc:	24 2b       	or	r18, r20
 3be:	20 83       	st	Z, r18
 3c0:	08 95       	ret
 3c2:	fc 01       	movw	r30, r24
 3c4:	40 81       	ld	r20, Z
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <_Z12writeDigitalPVhib+0x2a>
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <_Z12writeDigitalPVhib+0x26>
 3d4:	20 95       	com	r18
 3d6:	24 23       	and	r18, r20
 3d8:	20 83       	st	Z, r18
 3da:	08 95       	ret

000003dc <_Z10digitCounti>:
 3dc:	99 23       	and	r25, r25
 3de:	1c f4       	brge	.+6      	; 0x3e6 <_Z10digitCounti+0xa>
 3e0:	91 95       	neg	r25
 3e2:	81 95       	neg	r24
 3e4:	91 09       	sbc	r25, r1
 3e6:	8a 30       	cpi	r24, 0x0A	; 10
 3e8:	91 05       	cpc	r25, r1
 3ea:	6c f0       	brlt	.+26     	; 0x406 <_Z10digitCounti+0x2a>
 3ec:	84 36       	cpi	r24, 0x64	; 100
 3ee:	91 05       	cpc	r25, r1
 3f0:	6c f0       	brlt	.+26     	; 0x40c <_Z10digitCounti+0x30>
 3f2:	88 3e       	cpi	r24, 0xE8	; 232
 3f4:	23 e0       	ldi	r18, 0x03	; 3
 3f6:	92 07       	cpc	r25, r18
 3f8:	64 f0       	brlt	.+24     	; 0x412 <_Z10digitCounti+0x36>
 3fa:	80 31       	cpi	r24, 0x10	; 16
 3fc:	97 42       	sbci	r25, 0x27	; 39
 3fe:	64 f0       	brlt	.+24     	; 0x418 <_Z10digitCounti+0x3c>
 400:	85 e0       	ldi	r24, 0x05	; 5
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	08 95       	ret
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	08 95       	ret
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	08 95       	ret
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	08 95       	ret
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	08 95       	ret

0000041e <_Z19serialWriteUint16_0j>:

/************************************************************************/
/* converts an integer to its ascii representation and sends it via UART*/
/************************************************************************/
void serialWriteUint16_0(uint16_t val){
 41e:	cf 92       	push	r12
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	7c 01       	movw	r14, r24
	char resultString[numberOfDigits];
	//convert to string
	utoa(val, resultString, 10);
	//write to serial
	writeSerialString_0(resultString);
}
 434:	cd b6       	in	r12, 0x3d	; 61
 436:	de b6       	in	r13, 0x3e	; 62
/************************************************************************/
/* converts an integer to its ascii representation and sends it via UART*/
/************************************************************************/
void serialWriteUint16_0(uint16_t val){
	//get the number of digits
	uint8_t numberOfDigits = digitCount(val);
 438:	d1 df       	rcall	.-94     	; 0x3dc <_Z10digitCounti>
	//create buffer for result
	char resultString[numberOfDigits];
 43a:	2d b7       	in	r18, 0x3d	; 61
 43c:	3e b7       	in	r19, 0x3e	; 62
 43e:	28 1b       	sub	r18, r24
 440:	31 09       	sbc	r19, r1
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	3e bf       	out	0x3e, r19	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	2d bf       	out	0x3d, r18	; 61
 44c:	0d b7       	in	r16, 0x3d	; 61
 44e:	1e b7       	in	r17, 0x3e	; 62
 450:	0f 5f       	subi	r16, 0xFF	; 255
 452:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 454:	4a e0       	ldi	r20, 0x0A	; 10
 456:	b8 01       	movw	r22, r16
 458:	c7 01       	movw	r24, r14
 45a:	35 d0       	rcall	.+106    	; 0x4c6 <__utoa_ncheck>
	//convert to string
	utoa(val, resultString, 10);
	//write to serial
	writeSerialString_0(resultString);
 45c:	c8 01       	movw	r24, r16
 45e:	fa de       	rcall	.-524    	; 0x254 <_Z19writeSerialString_0PKc>
}
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de be       	out	0x3e, r13	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd be       	out	0x3d, r12	; 61
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	08 95       	ret

0000047c <main>:
}

int main(void)
{
    //make led pins output
	writeDigital(&DDRA, LED_2, true);
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	65 e0       	ldi	r22, 0x05	; 5
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	81 e2       	ldi	r24, 0x21	; 33
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	8f df       	rcall	.-226    	; 0x3a6 <_Z12writeDigitalPVhib>
	writeDigital(&DDRA, LED_3, true);
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	81 e2       	ldi	r24, 0x21	; 33
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	89 df       	rcall	.-238    	; 0x3a6 <_Z12writeDigitalPVhib>
	
	//make 7SD pins output
	DDRC = (1 << SEVEN_SEGMENT_CLOCK) | (1 << SEVEN_SEGMENT_DATA) | (1 << SEVEN_SEGMENT_DATA_ENABLE);
 494:	8c e1       	ldi	r24, 0x1C	; 28
 496:	87 b9       	out	0x07, r24	; 7
	
	//set all to off state
	PORTC = 0x00;
 498:	18 b8       	out	0x08, r1	; 8
	PORTA = 0x00;
 49a:	12 b8       	out	0x02, r1	; 2

	//initialize serial, config is 57600:8N1
	initSerial_0();
 49c:	e5 de       	rcall	.-566    	; 0x268 <_Z12initSerial_0v>
	
	//enable serial interrupts for buffered processing
	enableSerialInterrupts_0(true, true);
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	6c df       	rcall	.-296    	; 0x37c <_Z24enableSerialInterrupts_0bb>
	//testcode for serialDecimal write
	imu_data testData;
	testData.x = 0;
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
	testData.y = 0;
	testData.z = 0;
	while(1){
		testData.x++;
 4a8:	21 96       	adiw	r28, 0x01	; 1
		testData.y+=2;
		testData.z+=3;
		serialWriteUint16_0(testData.x);
 4aa:	ce 01       	movw	r24, r28
 4ac:	b8 df       	rcall	.-144    	; 0x41e <_Z19serialWriteUint16_0j>
		//writeSerial_0('\t');
		//writeSerialDecimal_0(testData.y);
		//writeSerial_0('\t');
		//writeSerialDecimal_0(testData.z);
		writeSerial_0('\n');
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	3f de       	rcall	.-898    	; 0x130 <_Z13writeSerial_0h>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	83 ec       	ldi	r24, 0xC3	; 195
 4b6:	99 e0       	ldi	r25, 0x09	; 9
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	90 40       	sbci	r25, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <main+0x3c>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <main+0x46>
 4c2:	00 00       	nop
 4c4:	f1 cf       	rjmp	.-30     	; 0x4a8 <main+0x2c>

000004c6 <__utoa_ncheck>:
 4c6:	bb 27       	eor	r27, r27

000004c8 <__utoa_common>:
 4c8:	fb 01       	movw	r30, r22
 4ca:	55 27       	eor	r21, r21
 4cc:	aa 27       	eor	r26, r26
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	aa 1f       	adc	r26, r26
 4d4:	a4 17       	cp	r26, r20
 4d6:	10 f0       	brcs	.+4      	; 0x4dc <__utoa_common+0x14>
 4d8:	a4 1b       	sub	r26, r20
 4da:	83 95       	inc	r24
 4dc:	50 51       	subi	r21, 0x10	; 16
 4de:	b9 f7       	brne	.-18     	; 0x4ce <__utoa_common+0x6>
 4e0:	a0 5d       	subi	r26, 0xD0	; 208
 4e2:	aa 33       	cpi	r26, 0x3A	; 58
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__utoa_common+0x20>
 4e6:	a9 5d       	subi	r26, 0xD9	; 217
 4e8:	a1 93       	st	Z+, r26
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	79 f7       	brne	.-34     	; 0x4cc <__utoa_common+0x4>
 4ee:	b1 11       	cpse	r27, r1
 4f0:	b1 93       	st	Z+, r27
 4f2:	11 92       	st	Z+, r1
 4f4:	cb 01       	movw	r24, r22
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <strrev>

000004f8 <strrev>:
 4f8:	dc 01       	movw	r26, r24
 4fa:	fc 01       	movw	r30, r24
 4fc:	67 2f       	mov	r22, r23
 4fe:	71 91       	ld	r23, Z+
 500:	77 23       	and	r23, r23
 502:	e1 f7       	brne	.-8      	; 0x4fc <strrev+0x4>
 504:	32 97       	sbiw	r30, 0x02	; 2
 506:	04 c0       	rjmp	.+8      	; 0x510 <strrev+0x18>
 508:	7c 91       	ld	r23, X
 50a:	6d 93       	st	X+, r22
 50c:	70 83       	st	Z, r23
 50e:	62 91       	ld	r22, -Z
 510:	ae 17       	cp	r26, r30
 512:	bf 07       	cpc	r27, r31
 514:	c8 f3       	brcs	.-14     	; 0x508 <strrev+0x10>
 516:	08 95       	ret

00000518 <_exit>:
 518:	f8 94       	cli

0000051a <__stop_program>:
 51a:	ff cf       	rjmp	.-2      	; 0x51a <__stop_program>
